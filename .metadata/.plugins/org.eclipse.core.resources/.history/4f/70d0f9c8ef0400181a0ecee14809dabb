public class Model {
	private static int player1 = 1;
	private static int player2 = 2;
	private int[][] board;

	public Model() {
		board = new int[8][8];
		setNewGame();
	}

	public int getRow() {
		return board.length;
	}

	public int getCol() {
		return board[0].length;
	}

	public int getPlayer(int row, int col) {
		return board[row][col];
	}

	public void setDisk(int row, int col, int player) {
		if (isLegalPlay(row, col, player)) {
			board[row][col] = player;
		}
	}

	private void setNewGame() {
		board[3][3] = player1;
		board[4][4] = player1;
		board[3][4] = player2;
		board[4][3] = player2;
	}

	public boolean checkIfWin() {
		for(int i = 0; i < getRow(); i++){
			for(int j = 0; j < getCol(); j++){
				if(isLegalPlay(i, j, player1) || isLegalPlay(i, j, player2)){
					return false;
				}
			}
		}
		return true;
	}

	private boolean isLegalPlay(int row, int col, int player) {
		return isInsideBoard(row, col) && checkForNeighbours(row, col, player) && checkIfSurrounded(row, col, player);
	}

	private boolean isInsideBoard(int row, int col) {
		return row >= 0 && row < 8 && col >= 0 && col < 8;
	}

	private boolean isOnTheEdge(int row, int col){
		return row == 0 || row == 8 || col == 0 || col == 8;
	}
	
	private boolean checkIfSurrounded(int row, int col, int player) {
		return checkUp(row, col, player) || checkUpRight(row, col, player) || checkRight(row, col, player)
				|| checkDownRight(row, col, player) || checkDown(row, col, player) || checkDownLeft(row, col, player)
				|| checkLeft(row, col, player) || checkUpLeft(row, col, player);
	}

	private boolean checkForNeighbours(int row, int col, int player){
		boolean legal = false;
		for(int i = -1; i <= 1; i++){
			for(int j = -1 ; j <= 1; j++){
				if(player != getPlayer(row + i, col + j)){
					legal = true;
					return legal;
				}
			}
		}
		return legal;
	}
	
	private boolean checkUp(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row - 1, col)) {
			checkUp(row - 1, col, player);
		}
		return true;
	}

	private boolean checkUpRight(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row - 1, col + 1)) {
			checkUp(row - 1, col + 1, player);
		}
		return true;
	}

	private boolean checkRight(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row, col + 1)) {
			checkUp(row, col + 1, player);
		}
		return true;
	}

	private boolean checkDownRight(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row + 1, col + 1)) {
			checkUp(row + 1, col + 1, player);
		}
		return true;
	}

	private boolean checkDown(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row + 1, col)) {
			checkUp(row + 1, col, player);
		}
		return true;
	}

	private boolean checkDownLeft(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row + 1, col - 1)) {
			checkUp(row + 1, col - 1, player);
		}
		return true;
	}

	private boolean checkLeft(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row, col - 1)) {
			checkUp(row, col - 1, player);
		}
		return true;
	}

	private boolean checkUpLeft(int row, int col, int player) {
		if (!isInsideBoard(row, col) || isOnTheEdge(row, col)) {
			return false;
		}

		if (player != getPlayer(row - 1, col - 1)) {
			checkUp(row - 1, col - 1, player);
		}
		return true;
	}
}